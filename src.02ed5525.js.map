{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"src.02ed5525.js","sourceRoot":"../src","sourcesContent":["const sounds = require('./allSounds/*.wav');\n\nclass DrumKit {\n  pads;\n  playButton;\n  currentKick;\n  currentSnare;\n  currentHihat;\n  selects;\n  kickSound;\n  snareSound;\n  hihatSound;\n  index;\n  beatsPerMinute;\n  isPlaying;\n  muteBtns;\n  tempoSlider;\n\n  constructor() {\n    this.pads = document.querySelectorAll('.pad') as NodeListOf<HTMLElement>;\n    this.playButton = document.querySelector('.play') as HTMLElement;\n    this.currentKick = '../allSounds/kick-classic.wav';\n    this.currentSnare = '../allSounds/snare-acoustic01.wav';\n    this.currentHihat = '../allSounds/hihat-acoustic01.wav';\n    this.kickSound = document.querySelector('.kick-sound') as HTMLMediaElement;\n    this.snareSound = document.querySelector(\n      '.snare-sound'\n    ) as HTMLMediaElement;\n    this.hihatSound = document.querySelector(\n      '.hihat-sound'\n    ) as HTMLMediaElement;\n    this.selects = document.querySelectorAll(\n      'select'\n    ) as NodeListOf<HTMLSelectElement>;\n    this.index = 0;\n    this.beatsPerMinute = 120;\n    this.isPlaying = 0;\n    this.muteBtns = document.querySelectorAll(\n      '.mute'\n    ) as NodeListOf<HTMLElement>;\n    this.tempoSlider = document.querySelector(\n      '.tempo-slider'\n    ) as HTMLInputElement;\n  }\n\n  /**\n   * Dinamically adds options to selects by types from imported sounds\n   */\n  addOptions() {\n    // Get array of all sound key names\n    const soundKeys = Object.keys(sounds);\n\n    // Separate names by types\n    const getOptions = (type: string) =>\n      soundKeys.filter((sound) => sound.includes(type));\n    const kickOptions = getOptions('kick');\n    const snareOptions = getOptions('snare');\n    const hihatOptions = getOptions('hihat');\n\n    // Removes dash and turns first letter uppercase\n    const cleanName = (name: string) =>\n      name\n        .split('-')\n        .map((name) => name[0].toUpperCase() + name.substring(1, name.length))\n        .join(' ');\n\n    // Create HTML markup for option node\n    const optionMarkup = (src: string, name: string) =>\n      `<option value=${src}>${name}</option>`;\n\n    // Inesrt correct options in correct select elements\n    this.selects.forEach((element) => {\n      switch (element.name) {\n        case 'kick-select':\n          // Set initial sound to first sound\n          this.kickSound.src = sounds[kickOptions[0]];\n\n          // Add option elements\n          kickOptions.forEach((option) =>\n            element.insertAdjacentHTML(\n              'beforeend',\n              optionMarkup(sounds[option], cleanName(option))\n            )\n          );\n          break;\n        case 'snare-select':\n          // Set initial sound to first sound\n          this.snareSound.src = sounds[snareOptions[0]];\n\n          // Add option elements\n          snareOptions.forEach((option) =>\n            element.insertAdjacentHTML(\n              'beforeend',\n              optionMarkup(sounds[option], cleanName(option))\n            )\n          );\n          break;\n        case 'hihat-select':\n          // Set initial sound to first sound\n          this.hihatSound.src = sounds[hihatOptions[0]];\n\n          // Add option elements\n          hihatOptions.forEach((option) =>\n            element.insertAdjacentHTML(\n              'beforeend',\n              optionMarkup(sounds[option], cleanName(option))\n            )\n          );\n          break;\n        default:\n          return;\n      }\n    });\n  }\n\n  /**\n   * Toggle active pad\n   * @param e\n   */\n  activePad(e: Event) {\n    const target = e.target as HTMLElement;\n    target.classList.toggle('active');\n  }\n\n  /**\n   * Play sound of all active pads\n   */\n  repeat() {\n    // Get the remainder so that on the last value it resets to zero\n    let step = this.index % (this.pads.length / 3);\n\n    const acitvePads = document.querySelectorAll(\n      `.b${step}`\n    ) as NodeListOf<HTMLElement>;\n\n    // Loop through all the pads\n    acitvePads.forEach((bar) => {\n      bar.style.animation = 'playSound .3s alternate 2 ease';\n      if (bar.classList.contains('active')) {\n        if (bar.classList.contains('kick-pad')) {\n          // Let's the sound play even if the previous one is still playing\n          this.kickSound.currentTime = 0;\n          this.kickSound.play();\n        }\n        if (bar.classList.contains('snare-pad')) {\n          this.snareSound.currentTime = 0;\n          this.snareSound.play();\n        }\n        if (bar.classList.contains('hihat-pad')) {\n          this.hihatSound.currentTime = 0;\n          this.hihatSound.play();\n        }\n      }\n    });\n\n    // Update index so it would continue the loop\n    this.index++;\n  }\n\n  /**\n   * Clear interval\n   */\n  clearPlayInterval() {\n    clearInterval(this.isPlaying);\n    this.isPlaying = 0;\n  }\n\n  /**\n   * Plays the sounds\n   */\n  play() {\n    // Set the interval\n    const interval = (60 / this.beatsPerMinute) * 1000;\n\n    // Check if it is playing, if not set interval id\n    if (!this.isPlaying) {\n      this.isPlaying = window.setInterval(() => {\n        this.repeat();\n      }, interval);\n    } else {\n      this.clearPlayInterval();\n    }\n  }\n\n  /**\n   * Update play button\n   */\n  updatePlayBtn() {\n    if (!this.isPlaying) {\n      this.playButton.innerText = 'Pause';\n      this.playButton.classList.add('active');\n    } else {\n      this.playButton.innerText = 'Play';\n      this.playButton.classList.remove('active');\n    }\n  }\n\n  /**\n   * Change audio src on selection\n   * @param e\n   */\n  changeSound(e: Event) {\n    const { name, value } = e.target as HTMLSelectElement;\n    switch (name) {\n      case 'kick-select':\n        this.kickSound.src = value;\n        break;\n      case 'snare-select':\n        this.snareSound.src = value;\n        break;\n      case 'hihat-select':\n        this.hihatSound.src = value;\n        break;\n      default:\n        return;\n    }\n  }\n\n  /**\n   * Mute and unmute sounds\n   * @param e\n   */\n  mute(e: Event) {\n    const target = e.target as HTMLSelectElement;\n    const muteIndex = target.getAttribute('data-track');\n    target.classList.toggle('active');\n    if (target.classList.contains('active')) {\n      switch (muteIndex) {\n        case '0':\n          this.kickSound.volume = 0;\n          break;\n        case '1':\n          this.snareSound.volume = 0;\n          break;\n        case '2':\n          this.hihatSound.volume = 0;\n          break;\n        default:\n          return;\n      }\n    } else {\n      switch (muteIndex) {\n        case '0':\n          this.kickSound.volume = 1;\n          break;\n        case '1':\n          this.snareSound.volume = 1;\n          break;\n        case '2':\n          this.hihatSound.volume = 1;\n          break;\n        default:\n          return;\n      }\n    }\n  }\n\n  /**\n   * Change text value of tempo\n   * @param e \n   */\n  changeTempo(e: Event) {\n    const { value } = e.target as HTMLSelectElement;\n    const tempoText = document.querySelector('.tempo-nr') as HTMLElement;\n    tempoText.innerHTML = value;\n  }\n\n  /**\n   * Update beat per minute tempo for sound\n   * @param e \n   */\n  updateTempo(e: Event) {\n    const { value } = e.target as HTMLSelectElement;\n    // Set new beat value\n    this.beatsPerMinute = parseInt(value);\n\n    // Clear interval\n    this.clearPlayInterval();\n\n    // Continue playing if the sound is playing\n    if(this.playButton.classList.contains('active')){\n      this.play();\n    }\n  }\n}\n\nconst drumKit = new DrumKit();\n\ndrumKit.addOptions();\n\n// Events\n\ndrumKit.pads.forEach((pad) => {\n  pad.addEventListener('click', drumKit.activePad);\n  pad.addEventListener('animationend', () => {\n    pad.style.animation = '';\n  });\n});\n\ndrumKit.playButton.addEventListener('click', () => {\n  drumKit.updatePlayBtn();\n  drumKit.play();\n});\n\ndrumKit.selects.forEach((select) => {\n  select.addEventListener('change', (e) => {\n    drumKit.changeSound(e);\n  });\n});\n\ndrumKit.muteBtns.forEach((btn) => {\n  btn.addEventListener('click', (e) => {\n    drumKit.mute(e);\n  });\n});\n\ndrumKit.tempoSlider.addEventListener('input', (e) => {\n  drumKit.changeTempo(e);\n});\n\ndrumKit.tempoSlider.addEventListener('change', (e) => {\n  drumKit.updateTempo(e);\n});\n"]}